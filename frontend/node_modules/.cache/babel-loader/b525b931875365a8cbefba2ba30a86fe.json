{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\hulugram\\\\src\\\\components\\\\Statistics.jsx\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\nclass Statistics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      statisticsData: {\n        \"downloads\": 1000,\n        \"likes\": 200,\n        \"reviews\": 17,\n        \"verstion\": 6\n      },\n      error: null\n    };\n  }\n\n  fetchStatisticsData() {\n    // Where we're fetching data from\n    axios.get(\"https://hulugram-beta.firebaseio.com/appstat.json\") // We get the API response and receive data in JSON format...\n    .then(response => {\n      console.log(response);\n      this.setState({\n        statisticsData: response.data\n      });\n    }) // Catch any errors we hit and update the app\n    .catch(error => {\n      console.log(error);\n    });\n  }\n\n  componentDidMount() {\n    this.fetchStatisticsData();\n    console.log(this.state.statisticsData);\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          statisticsData = _this$state.statisticsData,\n          error = _this$state.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, error.message) : null, \"// Here's our data check\", !isLoading ? users.map(user => {\n      const username = user.username,\n            name = user.name,\n            email = user.email;\n      return React.createElement(\"div\", {\n        key: username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Name: \", name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Email Address: \", email), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    }) // If there is a delay in data, let's let the user know it's loading\n    : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n} // {\"downloads\":1000,\"likes\":200,\"reviews\":17,\"verstion\":6}\n\n\nexport default Statistics;","map":{"version":3,"sources":["C:/projects/hulugram/src/components/Statistics.jsx"],"names":["React","Component","axios","Statistics","constructor","props","state","isLoading","statisticsData","error","fetchStatisticsData","get","then","response","console","log","setState","data","catch","componentDidMount","render","message","users","map","user","username","name","email"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAc;AACZC,MAAAA,SAAS,EAAE,IADC;AAEZC,MAAAA,cAAc,EAAG;AAAC,qBAAY,IAAb;AAAkB,iBAAQ,GAA1B;AAA8B,mBAAU,EAAxC;AAA2C,oBAAW;AAAtD,OAFL;AAGZC,MAAAA,KAAK,EAAE;AAHK,KAAd;AAMH;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB;AACAR,IAAAA,KAAK,CAACS,GAAN,sDACE;AADF,KAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAKG,QAAL,CAAc;AAACR,QAAAA,cAAc,EAAEK,QAAQ,CAACI;AAA1B,OAAd;AACD,KALH,EAME;AANF,KAOGC,KAPH,CAOST,KAAK,IAAI;AACRK,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACP,KATH;AAUC;;AAEJU,EAAAA,iBAAiB,GAAG;AACnB,SAAKT,mBAAL;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWE,cAAvB;AACA;;AAEJY,EAAAA,MAAM,GAAG;AAAA,wBAEsC,KAAKd,KAF3C;AAAA,UAECC,SAFD,eAECA,SAFD;AAAA,UAEYC,cAFZ,eAEYA,cAFZ;AAAA,UAE4BC,KAF5B,eAE4BA,KAF5B;AAGP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCA,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACY,OAAV,CAAH,GAA4B,IADlC,8BAIC,CAACd,SAAD,GACCe,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI;AAAA,YACRC,QADQ,GACkBD,IADlB,CACRC,QADQ;AAAA,YACEC,IADF,GACkBF,IADlB,CACEE,IADF;AAAA,YACQC,KADR,GACkBH,IADlB,CACQG,KADR;AAEhB,aACE;AAAK,QAAA,GAAG,EAAEF,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAUC,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAmBC,KAAnB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD,KATD,CADD,CAWD;AAXC,MAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjBF,CADF;AAyBD;;AA1DgC,C,CAgEnC;;;AAEA,eAAexB,UAAf","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\nclass Statistics extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state  = {\r\n          isLoading: true,\r\n          statisticsData : {\"downloads\":1000,\"likes\":200,\"reviews\":17,\"verstion\":6},\r\n          error: null\r\n            \r\n        }\r\n    }\r\n\r\n    fetchStatisticsData() {\r\n        // Where we're fetching data from\r\n        axios.get(`https://hulugram-beta.firebaseio.com/appstat.json`)\r\n          // We get the API response and receive data in JSON format...\r\n          .then(response => {\r\n            console.log(response)\r\n            this.setState({statisticsData: response.data})\r\n          })\r\n          // Catch any errors we hit and update the app\r\n          .catch(error => {\r\n                  console.log(error)\r\n          });\r\n        }\r\n\r\n     componentDidMount() { \r\n      this.fetchStatisticsData();\r\n      console.log(this.state.statisticsData);\r\n     }\r\n\r\n  render() {\r\n    \r\n    const { isLoading, statisticsData, error } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n      {error ? <p>{error.message}</p> : null}\r\n\r\n      // Here's our data check\r\n      {!isLoading ? (\r\n        users.map(user => {\r\n          const { username, name, email } = user;\r\n          return (\r\n            <div key={username}>\r\n              <p>Name: {name}</p>\r\n              <p>Email Address: {email}</p>\r\n              <hr />\r\n            </div>\r\n          );\r\n        })\r\n      // If there is a delay in data, let's let the user know it's loading\r\n      ) : (\r\n        <h3>Loading...</h3>\r\n      )}\r\n\r\n\r\n\r\n            </React.Fragment>\r\n    ); \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// {\"downloads\":1000,\"likes\":200,\"reviews\":17,\"verstion\":6}\r\n\r\nexport default Statistics;\r\n"]},"metadata":{},"sourceType":"module"}